//TODO: Declare the input and output path.
DECLARE @paramInputDir  string = "/course-kg/input/";
DECLARE @paramOutputDir string = "/course-kg/output/";

DECLARE @inPaperAuthors string = @paramInputDir + "Paper_authors.tsv";
DECLARE @inPaperVenue string = @paramInputDir + "Paper_venue.tsv";

DECLARE @outLabThreeResults string = @paramOutputDir + "Results_lab_for_module_four_five.tsv";


//Extract paper-author table.
@paperAuthors =
    EXTRACT PaperId long, 
            AuthorId long
    FROM @inPaperAuthors
    USING Extractors.Tsv(silent: true, quoting: false);

@paperVenue = 
    EXTRACT PaperId long, 
            VenueName string
    FROM @inPaperVenue
    USING Extractors.Tsv(silent: true, quoting: false);


//Q1--3
//Connect paper-author link with paper-venue link to get paper-author-venue triples
@paperAuthorVenue =
    SELECT z.PaperId,
           z.AuthorId,
           a.VenueName
    FROM @paperAuthors AS z
         //Q1: START CODE HERE
          
         //Q1: END CODE HERE
             @paperVenue AS a
         ON z.PaperId == a.PaperId;

//Count the number of papers, authors, and venues in the paper-author-venue triples
@nodeCounts = 
    SELECT "Q1: #papers in the triple set" AS CountKey,
           (double?)COUNT(DISTINCT PaperId) AS CountValue
    FROM @paperAuthorVenue
    UNION ALL
    SELECT "Q2: #authors in the triple set" AS CountKey, 
           (double?)COUNT(DISTINCT AuthorId) AS CountValue
    FROM @paperAuthorVenue
    UNION ALL
    SELECT "Q3: #venues in the triple set" AS CountKey,
           (double?)COUNT(DISTINCT VenueName) AS CountValue
    FROM @paperAuthorVenue;

//Q4
@allNodeCount = 
    SELECT "Q4: #nodes in the triple set" AS CountKey, 
           //Q4: START CODE HERE
            
           //Q4: END CODE HERE
    FROM @nodeCounts;

//Q5
//Get the average number of veneus that each author publishes at
@authorVenueCount =
    SELECT AuthorId,
           COUNT(DISTINCT VenueName) AS NumVenues
    FROM @paperAuthorVenue
    GROUP BY AuthorId;

@authorAverageVenueCount =
    SELECT "Q5: average #venues that each author publishes at" AS CountKey,
           //Q5: START CODE HERE
            
           //Q5: END CODE HERE
    FROM @authorVenueCount;           


//Q6-7
//Get the average number of authors that each venue has
@venueAuthorCount = 
    SELECT VenueName, 
           COUNT(DISTINCT AuthorId) AS NumAuthors
    FROM @paperAuthorVenue
    GROUP BY VenueName;

@venueAverageAuthorCount =
    SELECT "Q7: average #authors that each venue has" AS CountKey,
           //Q6: START CODE HERE
            
           //Q6: END CODE HERE
    FROM @venueAuthorCount;


//Q8
//Get the number of authors that KDD has
@kddAuthorCount = 
    SELECT "Q8: #authors that KDD has" AS CountKey,
           (double?)NumAuthors AS CountValue
    FROM @venueAuthorCount
    //Q8: START CODE HERE
     
    //Q8: END CODE HERE
    
//Q9
//Get the number of common authors that three venues KDD, ICML, and IJCAI have
@authorVenuePairs =
    SELECT AuthorId,
           VenueName
    FROM @paperAuthorVenue
    WHERE VenueName == "KDD" OR VenueName == "ICML" OR VenueName == "IJCAI"
    GROUP BY AuthorId,
             VenueName;

@authorNumVenues = 
    SELECT AuthorId, 
           COUNT(DISTINCT VenueName) AS NumVenues
    FROM @authorVenuePairs
    GROUP BY AuthorId;

@numVenueAuthorCount = 
    SELECT NumVenues, 
           //Q9: START CODE HERE
            
           //Q9: END CODE HERE
           FROM @authorNumVenues
    GROUP BY NumVenues;

@threeVenueAuthorCount = 
    SELECT "Q9: #authors that publish at KDD, ICML, and IJCAI" AS CountKey, 
           (double?)NumAuthors AS CountValue
    FROM @numVenueAuthorCount
    WHERE NumVenues == 3;



@results =
    SELECT * FROM @nodeCounts
    UNION ALL 
    SELECT * FROM @allNodeCount
    UNION ALL
    SELECT * FROM @authorAverageVenueCount
    UNION ALL 
    SELECT * FROM @venueAverageAuthorCount
    UNION ALL
    SELECT * FROM @kddAuthorCount     
    UNION ALL 
    SELECT * FROM @threeVenueAuthorCount;


         
OUTPUT @results
TO @outLabThreeResults
USING Outputters.Tsv(outputHeader: true);